{"version":3,"file":"static/js/946.db8ba91c.chunk.js","mappings":"sJAGIA,E,oBACAC,EAAQ,IAAIC,WAAW,IACZ,SAASC,IAEtB,IAAKH,KAGHA,EAAoC,qBAAXI,QAA0BA,OAAOJ,iBAAmBI,OAAOJ,gBAAgBK,KAAKD,SAA+B,qBAAbE,UAAgE,oBAA7BA,SAASN,iBAAkCM,SAASN,gBAAgBK,KAAKC,WAGrO,MAAM,IAAIC,MAAM,4GAIpB,OAAOP,EAAgBC,GCjBzB,4HCQA,ICFA,MAJA,SAAkBO,GAChB,MAAuB,kBAATA,GAAqBC,EAAAA,KAAWD,IDG5CE,EAAY,GAEPC,EAAI,EAAGA,EAAI,MAAOA,EACzBD,EAAUE,MAAMD,EAAI,KAAOE,SAAS,IAAIC,OAAO,IAoBjD,MAjBA,SAAmBC,GACjB,IAAIC,EAASC,UAAUC,OAAS,QAAsBC,IAAjBF,UAAU,GAAmBA,UAAU,GAAK,EAG7ET,GAAQE,EAAUK,EAAIC,EAAS,IAAMN,EAAUK,EAAIC,EAAS,IAAMN,EAAUK,EAAIC,EAAS,IAAMN,EAAUK,EAAIC,EAAS,IAAM,IAAMN,EAAUK,EAAIC,EAAS,IAAMN,EAAUK,EAAIC,EAAS,IAAM,IAAMN,EAAUK,EAAIC,EAAS,IAAMN,EAAUK,EAAIC,EAAS,IAAM,IAAMN,EAAUK,EAAIC,EAAS,IAAMN,EAAUK,EAAIC,EAAS,IAAM,IAAMN,EAAUK,EAAIC,EAAS,KAAON,EAAUK,EAAIC,EAAS,KAAON,EAAUK,EAAIC,EAAS,KAAON,EAAUK,EAAIC,EAAS,KAAON,EAAUK,EAAIC,EAAS,KAAON,EAAUK,EAAIC,EAAS,MAAMI,cAMzf,IAAKC,EAASb,GACZ,MAAMc,UAAU,+BAGlB,OAAOd,GEHT,MApBA,SAAYe,EAASC,EAAKR,GAExB,IAAIS,GADJF,EAAUA,GAAW,IACFG,SAAWH,EAAQpB,KAAOA,KAK7C,GAHAsB,EAAK,GAAe,GAAVA,EAAK,GAAY,GAC3BA,EAAK,GAAe,GAAVA,EAAK,GAAY,IAEvBD,EAAK,CACPR,EAASA,GAAU,EAEnB,IAAK,IAAIL,EAAI,EAAGA,EAAI,KAAMA,EACxBa,EAAIR,EAASL,GAAKc,EAAKd,GAGzB,OAAOa,EAGT,OAAOG,EAAUF,I,mBCbbG,EAAwC,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAC/C,OAAO,SAACC,EAAA,EAAD,CAAMC,MAAM,UAAUC,MAAOH,KAGtC,GAAeI,EAAAA,EAAAA,MAAKL,G,oBCyCpB,EA5CmB,WACjB,OAA4BM,EAAAA,EAAAA,UAAiB,IAA7C,eAAOC,EAAP,KAAeC,EAAf,KACQC,GAAeC,EAAAA,EAAAA,KAAfD,WAEFE,GAAmBC,EAAAA,EAAAA,UAAQ,WAC/B,OAAOH,EAAWI,KAAI,SAACC,GAAD,MAAY,CAChCC,GAAIC,IACJC,MAAOH,QAER,CAACL,IAEES,GAAqBN,EAAAA,EAAAA,UAAQ,WACjC,OAAKL,EAIEI,EAAiBQ,QAAO,SAAClB,GAAD,OAC7BA,EAAKgB,MAAMzB,cAAc4B,SAASb,EAAOf,kBAJlCmB,IAMR,CAACJ,EAAQI,IAMZ,OACE,UAAC,KAAD,YACE,SAAC,KAAD,CACEI,GAAG,mBACHX,MAAM,gBACNiB,YAAY,mBACZC,QAAQ,WACRL,MAAOV,EACPgB,SAZsB,SAACC,GAC3BhB,EAAUgB,EAAMC,OAAOR,WAarB,SAAC,KAAD,CAAaS,UAAU,MAAvB,SACGR,EAAmBL,KAAI,gBAAGI,EAAH,EAAGA,MAAOF,EAAV,EAAUA,GAAV,OACtB,SAAC,EAAD,CAAed,KAAMgB,GAAYF","sources":["../node_modules/uuid/dist/esm-browser/rng.js","../node_modules/uuid/dist/esm-browser/regex.js","../node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/uuid/dist/esm-browser/validate.js","../node_modules/uuid/dist/esm-browser/v4.js","pages/profile/components/HardSkills/HardSkillItem.tsx","pages/profile/components/HardSkills/HardSkills.tsx"],"sourcesContent":["// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;","import React, { FC, memo } from \"react\";\nimport { Chip } from \"@mui/material\";\n\ninterface HardSkillItemProps {\n  item: string;\n}\n\nconst HardSkillItem: FC<HardSkillItemProps> = ({ item }) => {\n  return <Chip color=\"primary\" label={item} />;\n};\n\nexport default memo(HardSkillItem);\n","import React, { useMemo, useState } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nimport HardSkillItem from \"./HardSkillItem\";\n\nimport { useProfileContext } from \"../../../../containers/Profile/context\";\nimport { StyledStack, Column, SearchSkillInput } from \"../../styled\";\n\nconst HardSkills = () => {\n  const [search, setSearch] = useState<string>(\"\");\n  const { hardSkills } = useProfileContext();\n\n  const hardSkillsWithId = useMemo(() => {\n    return hardSkills.map((skill) => ({\n      id: uuidv4(),\n      value: skill,\n    }));\n  }, [hardSkills]);\n\n  const filteredHardSkills = useMemo(() => {\n    if (!search) {\n      return hardSkillsWithId;\n    }\n\n    return hardSkillsWithId.filter((item) =>\n      item.value.toLowerCase().includes(search.toLowerCase())\n    );\n  }, [search, hardSkillsWithId]);\n\n  const onChangeSearchValue = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearch(event.target.value);\n  };\n\n  return (\n    <Column>\n      <SearchSkillInput\n        id=\"skills-searching\"\n        label=\"Search skills\"\n        placeholder=\"Enter skill name\"\n        variant=\"outlined\"\n        value={search}\n        onChange={onChangeSearchValue}\n      />\n      <StyledStack direction=\"row\">\n        {filteredHardSkills.map(({ value, id }) => (\n          <HardSkillItem item={value} key={id} />\n        ))}\n      </StyledStack>\n    </Column>\n  );\n};\n\nexport default HardSkills;\n"],"names":["getRandomValues","rnds8","Uint8Array","rng","crypto","bind","msCrypto","Error","uuid","REGEX","byteToHex","i","push","toString","substr","arr","offset","arguments","length","undefined","toLowerCase","validate","TypeError","options","buf","rnds","random","stringify","HardSkillItem","item","Chip","color","label","memo","useState","search","setSearch","hardSkills","useProfileContext","hardSkillsWithId","useMemo","map","skill","id","uuidv4","value","filteredHardSkills","filter","includes","placeholder","variant","onChange","event","target","direction"],"sourceRoot":""}